package com.negstek.openiotchallenge3.raspberry;

import java.io.IOException;
import java.nio.ByteBuffer;

import jdk.dio.ClosedDeviceException;
import jdk.dio.UnavailableDeviceException;
import jdk.dio.spibus.SPIDevice;

public class ReazdAnalog3 {

	private Type type = Type.MCP3202;
	private SPIDevice spiDevice;
	

	public void McpAdc(int controller, int chipSelect) {	
		spiDevice = new SPIDevice(controller, chipSelect);
	}
	
	@Override
	public void close() throws RuntimeIOException {
		Logger.debug("close()");
		// Close all open pins before closing the SPI device itself
		shutdown();
		spiDevice.close();
	}

	/**
	 * Read the raw integer value 0..(range-1) or -range..(range-1)
	 * If differential read see the table below for channel selection.
	 * <pre>{@code
	 * Single |    |    |    | Pin | Input  | Channel  
	 * / Diff | D2 | D1 | D0 | Num | Config | Selection
	 * -------+----+----+----+-----+--------+----------
	 *   1    | 0  | 0  | 0  |  0  | Single |   CH0
	 *   1    | 0  | 0  | 1  |  1  | Single |   CH1
	 *   1    | 0  | 1  | 0  |  2  | Single |   CH2
	 *   1    | 0  | 1  | 1  |  3  | Single |   CH3
	 *   1    | 1  | 0  | 0  |  4  | Single |   CH4
	 *   1    | 1  | 0  | 1  |  5  | Single |   CH5
	 *   1    | 1  | 1  | 0  |  6  | Single |   CH6
	 *   1    | 1  | 1  | 1  |  7  | Single |   CH7
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 0  | 0  | 0  |  0  | Single | CH0=IN+
	 *        |    |    |    |     | Single | CH1=IN-
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 0  | 0  | 1  |  1  | Single | CH0=IN-
	 *        |    |    |    |     | Single | CH1=IN+
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 0  | 1  | 0  |  2  | Single | CH2=IN+
	 *        |    |    |    |     | Single | CH3=IN-
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 0  | 1  | 1  |  3  | Single | CH2=IN-
	 *        |    |    |    |     | Single | CH3=IN+
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 1  | 0  | 0  |  4  | Single | CH4=IN+
	 *        |    |    |    |     | Single | CH5=IN-
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 1  | 0  | 1  |  5  | Single | CH4=IN-
	 *        |    |    |    |     | Single | CH5=IN+
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 1  | 1  | 0  |  6  | Single | CH6=IN+
	 *        |    |    |    |     | Single | CH7=IN-
	 * -------+----+----+----+-----+--------+----------
	 *   0    | 1  | 1  | 1  |  7  | Single | CH6=IN-
	 *        |    |    |    |     | Single | CH7=IN+
	 * }</pre>
	 * @throws IOException 
	 * @throws ClosedDeviceException 
	 * @throws UnavailableDeviceException 
	 * @throws RuntimeIOException 
	 */
	private int getRawValue(int adcPin, boolean differentialRead) throws UnavailableDeviceException, ClosedDeviceException, IOException {
		
		ByteBuffer out;
		out = ByteBuffer.allocate(3);
		out.put((byte) (0x10 | (differentialRead ? 0 : 0x08 ) | adcPin));
		// Pad with 2 zero bytes
		out.put((byte) 0);
		out.put((byte) 0);
		
		out.flip();
		int in = spiDevice.read(out);
		//Logger.debug(String.format("0x%x, 0x%x, 0x%x",
		//		Byte.valueOf(in.get(0)), Byte.valueOf(in.get(1)), Byte.valueOf(in.get(2))));

		return in;
	}
	
	private int extractValue(ByteBuffer in) {
		/*
		 * Rx x0RRRRRR RRRRxxxx for the 30xx (10-bit unsigned)
		 * Rx x0RRRRRR RRRRRRxx for the 32xx (12-bit unsigned)
		 * Rx x0SRRRRR RRRRRRRx for the 33xx (13-bit signed)
		 */
		if (type.isSigned()) {
			// Relies on the >> operator to preserve the sign bit
			return ((short) (in.getShort() << 2)) >> (14+2-type.getResolution());
		}
		
		// Note can't use >>> to propagate MSB 0s as it doesn't work with short, only integer
		return (in.getShort() & 0x3fff) >> (14 - type.getResolution());
	}
	

	@Override
	public String getName() {
		return type.name() + "-" + spiDevice.getController() + "-" + spiDevice.getChipSelect();
}
	
	public static enum Type {
		MCP3202(2, 12);
		private int numPins;
		private int resolution;
		private boolean signed;
		private int range;
		private Type(int numPins, int resolution) {
			this(numPins, resolution, false);
		}
		private Type(int numPins, int resolution, boolean signed) {
			this.numPins = numPins;
			this.resolution = resolution;
			this.signed = signed;
			range = (int) Math.pow(2, resolution) / (signed ? 2 : 1);
		}
		public int getNumPins() {
			return numPins;
		}
		public int getResolution() {
			return resolution;
		}
		public boolean isSigned() {
			return signed;
		}
		public int getRange() {
			return range;
		}
	}

}
